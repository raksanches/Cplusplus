#include "SolidDomain.h"

std::vector<std::string> split(std::string str, std::string delim)
{
	std::istringstream is(str);
	std::vector<std::string> values;
	std::string token;
	while (getline(is, token, ' '))
		values.push_back(token);
	return values;
}

std::vector<int> intersection(std::vector<int> vector1, std::vector<int> vector2)
{
	std::sort(vector1.begin(), vector1.end());
	std::sort(vector2.begin(), vector2.end());

	std::vector<int> vector3;
	std::set_intersection(vector1.begin(), vector1.end(), vector2.begin(), vector2.end(), std::back_inserter(vector3));

	return vector3;
}

SolidDomain::SolidDomain(Geometry* geometry, const int& index)
{
	geometry_ = geometry;
	index_ = index;
}

SolidDomain::~SolidDomain() {}

Node* SolidDomain::getNode(const int& index)
{
	return nodes_[index];
}

Element* SolidDomain::getElement(const int& index)
{
	return elements_[index];
}

Material* SolidDomain::getMaterial(const int& index)
{
	return materials_[index];
}

std::vector<BoundaryCondition*> SolidDomain::getBoundaryConditions(const std::string& type)
{
	return boundaryConditions_[type];
}

void SolidDomain::setAnalysisParameters(const int& numberOfTimeSteps, const double& deltat, const double& gravity, const double& beta, const double& gamma, const std::string& type)
{
	numberOfTimeSteps_ = numberOfTimeSteps;
	deltat_ = deltat;
	gravity_ = gravity;
	beta_ = beta;
	gamma_ = gamma;
	analysisType_ = type;
}

void SolidDomain::addNode(const int& index, const bounded_vector<double,2>& initialCoordinate)
{
	Node* n = new Node(index, initialCoordinate);
	nodes_.push_back(n);
}

void SolidDomain::addElement(const int& index, const std::vector<int>& nodesIndex, const int& materialIndex, const double& thickness, const std::string& elementType)
{
	std::vector<Node*> nodes;
	nodes.reserve(nodesIndex.size());
	for (const int& i : nodesIndex)
		nodes.push_back(nodes_[i]);
	Element* e = new Element(index, nodes, materials_[materialIndex], thickness, elementType);
	e->setAnalysisParameters(deltat_, gravity_, beta_, gamma_);
	elements_.push_back(e);
}

void SolidDomain::addSurfaceMaterial(const std::vector<PlaneSurface*> surfaces, const double& young, const double& poisson, const double& density)
{
	int index = materials_.size();
	Material* m = new Material(index, young, poisson, density);
	materials_.push_back(m);
	for (PlaneSurface* surface : surfaces)
		surface->setMaterial(m);
}

void SolidDomain::readInput(const std::string& inputFile, const bool& deleteFiles)
{
	//defyning the maps that are used to store the elements information
	std::unordered_map<int, std::string> gmshElement = { {1, "line"}, {2, "triangle"}, {3, "quadrilateral"}, {8, "line3"}, {9, "triangle6"}, {10, "quadrilateral9"}, {15, "vertex"}, {16, "quadrilateral8"}, {20, "triangle9"}, {21, "triangle10"}, {26, "line4"}, {36, "quadrilateral16"}, {39, "quadrilateral12"} };
	std::unordered_map<std::string, int> numNodes = { {"vertex", 1}, {"line", 2}, {"triangle", 3}, {"quadrilateral", 4}, {"line3", 3}, {"triangle6", 6}, {"quadrilateral8", 8}, {"quadrilateral9", 9}, {"line4", 4}, {"triangle", 9}, {"triangle10", 10}, {"quadrilateral12", 12}, {"quadrilateral16", 16}};
	std::unordered_map<std::string, std::string> supportedElements = { {"triangle", "T3"}, {"triangle6", "T6"}, {"triangle10", "T10"}, {"quadrilateral", "Q4"}, {"quadrilateral8", "Q8"}, {"quadrilateral9", "Q9"}, {"quadrilateral12", "Q12"}, {"quadrilateral16", "Q16"} };
	std::unordered_map<Line*, std::vector< std::vector<int> >> lineElements;

	//opening the .msh file
	std::ifstream file(inputFile);
	std::string line;
	std::getline(file, line); std::getline(file, line); std::getline(file, line); std::getline(file, line);

	//reading physical entities
	int number_physical_entities;
	file >> number_physical_entities;
	std::getline(file, line);
	std::unordered_map<int, std::string> physicalEntities;
	physicalEntities.reserve(number_physical_entities);
	for (int i = 0; i < number_physical_entities; i++)
	{
		std::getline(file, line);
		std::vector<std::string> tokens = split(line, " ");
		int index;
		std::istringstream(tokens[1]) >> index;
		physicalEntities[index] = tokens[2].substr(1, tokens[2].size() - 2);
	}
	std::getline(file, line); std::getline(file, line);

	//reading nodes
	int number_nodes;
	file >> number_nodes;
	nodes_.reserve(number_nodes);
	std::getline(file, line);
	for (int i = 0; i < number_nodes; i++)
	{
		std::getline(file, line);
		std::vector<std::string> tokens = split(line, " ");
		bounded_vector<double,2> coord;
		std::istringstream(tokens[1]) >> coord(0);
		std::istringstream(tokens[2]) >> coord(1);
		addNode(i, coord);
	}
	std::getline(file, line); std::getline(file, line);

	//reading elements
	int number_elements;
	file >> number_elements;
	elements_.reserve(number_elements);
	std::getline(file, line);
	int cont = 0;
	for (int i = 0; i < number_elements; i++)
	{
		std::getline(file, line);
		std::vector<std::string> tokens = split(line, " ");
		std::vector<int> values(tokens.size(), 0);
		for (size_t j = 0; j < tokens.size(); j++)
			std::istringstream(tokens[j]) >> values[j];
		std::string elementType = gmshElement[values[1]];
		int number_nodes_per_element = numNodes[elementType];
		std::vector<int> elementNodes;
		elementNodes.reserve(number_nodes_per_element);
		for (size_t j = 5 ; j < values.size(); j++)
			elementNodes.push_back(values[j]-1);
		std::string name = physicalEntities[values[3]];
		//Adding 2D elements to surfaces
		if (name[0] == 's')
		{
			if (supportedElements.find(elementType) == supportedElements.end())
			{
				std::cout << elementType << " is not supported.\n";
				exit(EXIT_FAILURE);
			}
			PlaneSurface* object = geometry_->getPlaneSurface(name);
			int materialIndex = object->getMaterial()->getIndex();
			double thickness = object->getThickness();
			addElement(cont, elementNodes, materialIndex, thickness, supportedElements[elementType]);
			object->addElementToSurface(elements_[cont]);
			//Verifying if an element side touches a line
			for (auto it = lineElements.begin(); it != lineElements.end();)
			{
				auto& key = it->first;
				auto& value = it->second;
				int it2 = 0;
				for (auto it1 = value.begin(); it1 != value.end();)
				{
					auto nodes = lineElements[key][it2];
					std::sort(nodes.begin(), nodes.end());
					if (intersection(nodes, elementNodes) == nodes)
					{
						key->appendPlaneElement(elements_[cont]);
						it1 = value.erase(it1);
					}
					else
					{
						it1++;
						it2++;
					}
				}
				if (value.size() == 0)
					it = lineElements.erase(it);
				else
					it++;

			}
			
			cont += 1;
		}
		//Adding 1D elements to lines
		else if (name[0] == 'l')
		{
			Line* object = geometry_->getLine(name);
			std::vector<Node*> nodes;
			nodes.reserve(elementNodes.size());
			for (int index : elementNodes)
				nodes.push_back(nodes_[index]);
			object->appendNodes(nodes);
			if (lineElements.count(object) != 1)
				lineElements[object] = std::vector< std::vector<int> >();
			lineElements[object].push_back(elementNodes);
		}
		//Adding a node to point
		else
		{
			Point* object = geometry_->getPoint(name);
			object->addNodeToPoint(getNode(elementNodes[0]));
		}
	}
	//Closing the file
	file.close();
	if (deleteFiles)
		system((remove + inputFile).c_str());
}

std::vector<int> SolidDomain::applyDirichletConditions()
{
	std::vector<int> dof;
	//setting dof that are constrained
	for (BoundaryCondition* bc : boundaryConditions_["POINT_DISPLACEMENT"])
	{
		int nodeIndex = bc->getNodeIndex();
		for (size_t i = 0; i < 2; i++)
		{
			if (bc->getComponent(i).size() != 0)
			{
				dof.push_back(2*nodeIndex + i);
			}
		}

	}
	return dof;
}

vector<double> SolidDomain::applyNeumannConditions()
{
	int rank, size;
	MPI_Comm_rank(PETSC_COMM_WORLD, &rank);
	MPI_Comm_size(PETSC_COMM_WORLD, &size);

	vector<double> externalForces(2 * nodes_.size(), 0.0);
	if (rank == 0)
	{

		for (BoundaryCondition *bc : boundaryConditions_["DIST_LOAD"])
		{
			int index = bc->getElementIndex();
			Element *el = elements_[index];
			int side = bc->getElementSide();
			vector<double> distributedLoad = el->computeDistributedLoads(side, bc->getComponent(0), bc->getComponent(1));
			std::vector<Node *> sideNodes = el->getSideNodes(side);
			for (size_t i = 0; i < sideNodes.size(); i++)
			{
				for (size_t j = 0; j < 2; j++)
				{
					int dof = 2 * sideNodes[i]->getIndex() + j;
					externalForces(dof) += distributedLoad(2 * i + j);
				}
			}
		}

		for (BoundaryCondition *bc : boundaryConditions_["POINT_LOAD"])
		{
			int index = bc->getNodeIndex();
			double x = bc->getComponent(0)[0];
			double y = bc->getComponent(1)[0];
			externalForces(2 * index) += x;
			externalForces(2 * index + 1) += y;
		}
	}
		return externalForces;
}

void SolidDomain::addBoundaryConditions()
{
	//transfering neumann conditions
	for (auto gbc : geometry_->getBoundaryConditions("NEUMANN"))
	{
		//transfering point loads applied to points
		if (gbc->getLineName().length() == 0)
		{
			std::string pointName = gbc->getPointName();
			std::string referenceSystem = gbc->getReferenceSystem();
			std::vector<double> componentX = gbc->getComponentX();
			std::vector<double> componentY = gbc->getComponentY();
			std::string method = gbc->getMethod();
			double penaltyParameter = gbc->getPenaltyParameter();
			std::string type = "POINT_LOAD";
			if (boundaryConditions_.count(type) == 0)
				boundaryConditions_[type] = std::vector<BoundaryCondition*>();
			int index = boundaryConditions_[type].size();
			Point* point = geometry_->getPoint(pointName);
			Node* node = point->getPointNode();
			BoundaryCondition* bc = new BoundaryCondition(index, node->getIndex(), componentX, componentY, method, referenceSystem, penaltyParameter);
			boundaryConditions_[type].push_back(bc);
		}
		//transfering distributed loads
		else
		{
			std::string lineName = gbc->getLineName();
			std::string referenceSystem = gbc->getReferenceSystem();
			std::vector<double> componentX = gbc->getComponentX();
			std::vector<double> componentY = gbc->getComponentY();
			std::string method = gbc->getMethod();
			double penaltyParameter = gbc->getPenaltyParameter();
			std::string type = "DIST_LOAD";
			if (boundaryConditions_.count(type) == 0)
				boundaryConditions_[type] = std::vector<BoundaryCondition*>();
			int index = boundaryConditions_[type].size();
			Line* line = geometry_->getLine(lineName);
			std::pair<std::vector<Element*>, std::vector<int> > lineElements = line->getLineElements();
			for (size_t i = 0; i < lineElements.first.size(); i++)
			{
				Element* el = lineElements.first[i];
				int side = lineElements.second[i];
				BoundaryCondition* bc = new BoundaryCondition(index, el->getIndex(), side, componentX, componentY, method, referenceSystem, penaltyParameter);
				boundaryConditions_[type].push_back(bc);
			}
		}
	}

	for (auto gbc : geometry_->getBoundaryConditions("DIRICHLET"))
	{
		//transfering point displacements applied to points
		if (gbc->getLineName().length() == 0)
		{
			std::string pointName = gbc->getPointName();
			std::string referenceSystem = gbc->getReferenceSystem();
			std::vector<double> componentX = gbc->getComponentX();
			std::vector<double> componentY = gbc->getComponentY();
			std::string method = gbc->getMethod();
			double penaltyParameter = gbc->getPenaltyParameter();
			std::string type = "POINT_DISPLACEMENT";
			if (boundaryConditions_.count(type) == 0)
				boundaryConditions_[type] = std::vector<BoundaryCondition*>();
			int index = boundaryConditions_[type].size();
			Point* point = geometry_->getPoint(pointName);
			Node* node = point->getPointNode();
			BoundaryCondition* bc = new BoundaryCondition(index, node->getIndex(), componentX, componentY, method, referenceSystem, penaltyParameter);
			boundaryConditions_[type].push_back(bc);
		}
		//transfering point displacements applied to lines
		if (gbc->getPointName().length() == 0)
		{
			std::string lineName = gbc->getLineName();
			std::string referenceSystem = gbc->getReferenceSystem();
			std::vector<double> componentX = gbc->getComponentX();
			std::vector<double> componentY = gbc->getComponentY();
			std::string method = gbc->getMethod();
			double penaltyParameter = gbc->getPenaltyParameter();
			std::string type = "POINT_DISPLACEMENT";
			if (boundaryConditions_.count(type) == 0)
				boundaryConditions_[type] = std::vector<BoundaryCondition*>();
			int index = boundaryConditions_[type].size();
			Line* line = geometry_->getLine(lineName);
			for (Node* node : line->getLineNodes())
			{
				BoundaryCondition* bc = new BoundaryCondition(index, node->getIndex(), componentX, componentY, method, referenceSystem, penaltyParameter);
				boundaryConditions_[type].push_back(bc);
				index++;
			}
		}
		//transfering line displacements applied to lines

	}
	
}

void SolidDomain::generateMesh(const std::string& elementType, const std::string& algorithm, std::string geofile, const std::string& gmshPath, const bool& plotMesh, const bool& showInfo)
{	
	int rank, size;
	MPI_Comm_rank(PETSC_COMM_WORLD, &rank);
	MPI_Comm_size(PETSC_COMM_WORLD, &size);

	std::pair<std::string, bool> pair; pair.second = false;
	if (rank == 0)
	{
		pair = createMesh(geometry_, elementType, algorithm, geofile, gmshPath, plotMesh, showInfo);

		for (int i = 1; i < size; i++)
		{
			MPI_Send(pair.first.c_str(), pair.first.length()+1, MPI_CHAR, i, 0, PETSC_COMM_WORLD);
			if (i == size-1)
			{
				MPI_Send(&pair.second, 1, MPI_C_BOOL, i, 0, PETSC_COMM_WORLD);
				pair.second = false;
			}
		}
	}
	else
	{
		MPI_Status status;
		MPI_Probe(0, 0, PETSC_COMM_WORLD, &status);
		int count;
		MPI_Get_count(&status, MPI_CHAR, &count);
		char buf[count+1];
		MPI_Recv(&buf, count+1, MPI_CHAR, 0, 0, PETSC_COMM_WORLD, &status);
		pair.first = buf;
		if (rank == size-1)
			MPI_Recv(&pair.second, 1, MPI_C_BOOL, 0, 0, PETSC_COMM_WORLD, MPI_STATUS_IGNORE);
	}

	readInput(pair.first, pair.second);
	addBoundaryConditions();

	domainDecompositionMETIS(elementType);
}

int SolidDomain::solveTransientProblem(const int& maximumIterations, const double& tolerance)
{
	Mat               A;
    Vec               b, x, All;
    PetscErrorCode    ierr;
    PetscInt          Istart, Iend, Idof, Ione, iterations, *dof;
    KSP               ksp;
    PC                pc;
    VecScatter        ctx;
    PetscScalar       val, value;
	MatNullSpace      nullsp;

	int rank;

    MPI_Comm_rank(PETSC_COMM_WORLD, &rank);

	//Array of constrained degrees of freedom
	std::vector<int> temp = applyDirichletConditions();
	PetscMalloc1(temp.size(),&dof);
	for (size_t i = 0; i < temp.size(); i++)
	{
		dof[i] = temp[i];
	}

	//Vector of external forces
	vector<double> externalForce = applyNeumannConditions();

	// // //Create PETSc sparse parallel matrix
	// ierr = MatCreateAIJ(PETSC_COMM_WORLD, PETSC_DECIDE, PETSC_DECIDE,
	// 					2 * nodes_.size(), 2 * nodes_.size(),
	// 					100, NULL, 300, NULL, &A);
	// CHKERRQ(ierr);

	// ierr = MatGetOwnershipRange(A, &Istart, &Iend);
	// CHKERRQ(ierr);

	// //Create PETSc vectors
	// ierr = VecCreate(PETSC_COMM_WORLD, &b);
	// CHKERRQ(ierr);
	// ierr = VecSetSizes(b, PETSC_DECIDE, 2 * nodes_.size());
	// CHKERRQ(ierr);
	// ierr = VecSetFromOptions(b);
	// CHKERRQ(ierr);
	// ierr = VecDuplicate(b, &x);
	// CHKERRQ(ierr);
	// ierr = VecDuplicate(b, &All);
	// CHKERRQ(ierr);

	// if (rank == 0)
	// 		{	
	// 			for ( size_t i = 0; i < nodes_.size(); i++)
	// 			{
	// 				if (fabs(externalForce(2 * i)) >= 1.0e-15)
	// 				{
	// 					int dof = 2 * i;
	// 					ierr = VecSetValues(b, 1, &dof, &externalForce(2 * i), ADD_VALUES);
	// 				}
	// 				if (fabs(externalForce(2 * i + 1)) >= 1.0e-15)
	// 				{
	// 					int dof = 2 * i + 1;
	// 					ierr = VecSetValues(b, 1, &dof, &externalForce(2 * i + 1), ADD_VALUES);
	// 				}
	// 			}
	// 		}

	// for (Element *el : elements_)
	// {
	// 	if (elementPartition_[el->getIndex()] == rank)
	// 	{
	// 		std::pair<vector<double>, matrix<double>> elementMatrices;
	// 		//std::cout << "Element " << el->getIndex() << "\n";
	// 		elementMatrices = el->computeInitialAccel();

	// 		//dispersing element rhs contribution into global rhs vector
	// 				for (size_t i = 0; i < el->getNodes().size(); i++)
	// 				{
	// 					//if (fabs(elementMatrices.first(2*i)) >= 1.0e-15)
	// 					{
	// 						int dof = 2 * el->getNode(i)->getIndex();
	// 						ierr = VecSetValues(b, 1, &dof, &elementMatrices.first(2*i), ADD_VALUES);
	// 						//std::cout << "dof " << dof << ", value " << elementMatrices.first(2*i) << "\n";
	// 					}
	// 					//if (fabs(elementMatrices.first(2*i+1)) >= 1.0e-15)
	// 					{
	// 						int dof = 2 * el->getNode(i)->getIndex() + 1;
	// 						ierr = VecSetValues(b, 1, &dof, &elementMatrices.first(2*i+1), ADD_VALUES);
	// 						//std::cout << "dof " << dof << ", value " << elementMatrices.first(2*i+1) << "\n";
	// 					}

	// 					//dispersing element tangent contribution into global sparse matrix
	// 					for (size_t j = 0; j < el->getNodes().size(); j++)
	// 					{
	// 						//if (fabs(elementMatrices.second(2*i, 2*j)) >= 1.e-15)
	// 						{
	// 							int dof1 = 2 * el->getNode(i)->getIndex();
	// 							int dof2 = 2 * el->getNode(j)->getIndex();
	// 							ierr = MatSetValues(A, 1, &dof1, 1, &dof2, &elementMatrices.second(2*i, 2*j), ADD_VALUES);
	// 						}
	// 						//if (fabs(elementMatrices.second(2*i+1, 2*j)) >= 1.e-15)
	// 						{
	// 							int dof1 = 2 * el->getNode(i)->getIndex() + 1;
	// 							int dof2 = 2 * el->getNode(j)->getIndex();
	// 							ierr = MatSetValues(A, 1, &dof1, 1, &dof2, &elementMatrices.second(2*i+1, 2*j), ADD_VALUES);
	// 						}
	// 						//if (fabs(elementMatrices.second(2*i, 2*j+1)) >= 1.e-15)
	// 						{
	// 							int dof1 = 2 * el->getNode(i)->getIndex();
	// 							int dof2 = 2 * el->getNode(j)->getIndex() + 1;
	// 							ierr = MatSetValues(A, 1, &dof1, 1, &dof2, &elementMatrices.second(2*i, 2*j+1), ADD_VALUES);
	// 						}
	// 						//if (fabs(elementMatrices.second(2*i+1, 2*j+1)) >= 1.e-15)
	// 						{
	// 							int dof1 = 2 * el->getNode(i)->getIndex() + 1;
	// 							int dof2 = 2 * el->getNode(j)->getIndex() + 1;
	// 							ierr = MatSetValues(A, 1, &dof1, 1, &dof2, &elementMatrices.second(2*i+1, 2*j+1), ADD_VALUES);
	// 						}
	// 					}
	// 				}
	// 	}
	// }

	// //Assemble matrices and vectors
	// ierr = MatAssemblyBegin(A, MAT_FINAL_ASSEMBLY);
	// CHKERRQ(ierr);
	// ierr = MatAssemblyEnd(A, MAT_FINAL_ASSEMBLY);
	// CHKERRQ(ierr);

	// ierr = VecAssemblyBegin(b);
	// CHKERRQ(ierr);
	// ierr = VecAssemblyEnd(b);
	// CHKERRQ(ierr);

	// //MatView(A,PETSC_VIEWER_STDOUT_WORLD);CHKERRQ(ierr);
	// //VecView(b,PETSC_VIEWER_STDOUT_WORLD);CHKERRQ(ierr);
	// //VecView(x,PETSC_VIEWER_STDOUT_WORLD);CHKERRQ(ierr);

	// //Apply dirichlet boundary conditions
	// MatZeroRowsColumns(A, temp.size(), dof, 1.0, x, b);

	// //MatView(A,PETSC_VIEWER_STDOUT_WORLD);CHKERRQ(ierr);
	// //VecView(b,PETSC_VIEWER_STDOUT_WORLD);CHKERRQ(ierr);
	// //VecView(x,PETSC_VIEWER_STDOUT_WORLD);CHKERRQ(ierr);

	// //Create KSP context to solve the linear system
	// ierr = KSPCreate(PETSC_COMM_WORLD, &ksp);
	// CHKERRQ(ierr);
	// ierr = KSPSetOperators(ksp, A, A);
	// CHKERRQ(ierr);
	// //Solve using MUMPS
	// #if defined(PETSC_HAVE_MUMPS)
	// 	ierr = KSPSetType(ksp, KSPPREONLY);
	// 	ierr = KSPGetPC(ksp, &pc);
	// 	ierr = PCSetType(pc, PCLU);
	// #endif
	// ierr = KSPSetFromOptions(ksp);
	// CHKERRQ(ierr);
	// ierr = KSPSetUp(ksp);

	// //Solve linear system
	// ierr = KSPSolve(ksp, b, x);
	// CHKERRQ(ierr);
	// ierr = KSPGetTotalIterations(ksp, &iterations);

	// //MatView(A,PETSC_VIEWER_STDOUT_WORLD);CHKERRQ(ierr);
	// //VecView(b,PETSC_VIEWER_STDOUT_WORLD);CHKERRQ(ierr);
	// //VecView(x,PETSC_VIEWER_STDOUT_WORLD);CHKERRQ(ierr);

	// //Gathers the solution vector to the master process
	// ierr = VecScatterCreateToAll(x, &ctx, &All);
	// CHKERRQ(ierr);
	// ierr = VecScatterBegin(ctx, x, All, INSERT_VALUES, SCATTER_FORWARD);
	// CHKERRQ(ierr);
	// ierr = VecScatterEnd(ctx, x, All, INSERT_VALUES, SCATTER_FORWARD);
	// CHKERRQ(ierr);
	// ierr = VecScatterDestroy(&ctx);
	// CHKERRQ(ierr);

	// Ione = 1;

	// for (size_t i = 0; i < nodes_.size(); i++)
	// {
	// 	bounded_vector<double,2> accel;
	// 	Idof = 2 * i;
	// 	ierr = VecGetValues(All, Ione, &Idof, &val);
	// 	CHKERRQ(ierr);
	// 	accel(0) = val;

	// 	Idof = 2 * i + 1;
	// 	ierr = VecGetValues(All, Ione, &Idof, &val);
	// 	CHKERRQ(ierr);
	// 	accel(1) = val;

	// 	nodes_[i]->setCurrentAcceleration(accel);
	// }

	// ierr = KSPDestroy(&ksp); CHKERRQ(ierr);
	// ierr = VecDestroy(&b); CHKERRQ(ierr);
	// ierr = VecDestroy(&x); CHKERRQ(ierr);
	// ierr = VecDestroy(&All); CHKERRQ(ierr);
	// ierr = MatDestroy(&A); CHKERRQ(ierr);

	// //export results to paraview
	// if (rank == 0)
	// 	exportToParaview(10000);
	
	for (int timeStep = 0; timeStep < numberOfTimeSteps_; timeStep++)
	{
		if (rank == 0)
		{
			std::cout << "------------------------- TIME STEP = "
                   	  << timeStep << " -------------------------\n";
		}
		//setting coordinate, velocity, acceleration and pressure of last time step
		for (Node* node : nodes_)
		{
			bounded_vector<double, 2> coordinate = node->getCurrentCoordinate();
			node->setPastCoordinate(coordinate);
			bounded_vector<double, 2> vel = node->getCurrentVelocity();
			node->setPastVelocity(vel);
			bounded_vector<double, 2> accel = node->getCurrentAcceleration();
			node->setPastAcceleration(accel);
		}
		//updating acceleration and velocity
		for (Node* node : nodes_)
		{
			bounded_vector<double, 2> vel, accel;
			accel = node->getCurrentCoordinate() / (beta_ * deltat_ * deltat_) - node->getPastCoordinate() / (beta_ * deltat_ * deltat_) -
					node->getPastVelocity() / (beta_ * deltat_) - node->getPastAcceleration() * (0.5 / beta_ - 1.0);
			node->setCurrentAcceleration(accel);
			vel = gamma_ * deltat_ * node->getCurrentAcceleration() + node->getPastVelocity() + deltat_ * (1.0 - gamma_) * node->getPastAcceleration();
			node->setCurrentVelocity(vel);
		}

		double norm = 100.0;

		for (int iteration = 0; (iteration < maximumIterations); iteration++)
		{
			//boost::posix_time::ptime t1 = boost::posix_time::microsec_clock::local_time();
            
			//Create PETSc sparse parallel matrix
            ierr = MatCreateAIJ(PETSC_COMM_WORLD, PETSC_DECIDE, PETSC_DECIDE,
                                2*nodes_.size(), 2*nodes_.size(),
                                100,NULL,300,NULL,&A); CHKERRQ(ierr);
            
            ierr = MatGetOwnershipRange(A, &Istart, &Iend);CHKERRQ(ierr);
            
            //Create PETSc vectors
            ierr = VecCreate(PETSC_COMM_WORLD,&b); CHKERRQ(ierr);
            ierr = VecSetSizes(b,PETSC_DECIDE,2*nodes_.size()); CHKERRQ(ierr);
            ierr = VecSetFromOptions(b); CHKERRQ(ierr);
            ierr = VecDuplicate(b,&x); CHKERRQ(ierr);
            ierr = VecDuplicate(b,&All); CHKERRQ(ierr);

			if (rank == 0)
			{	
				for ( size_t i = 0; i < nodes_.size(); i++)
				{
					if (fabs(externalForce(2 * i)) >= 1.0e-15)
					{
						int dof = 2 * i;
						ierr = VecSetValues(b, 1, &dof, &externalForce(2 * i), ADD_VALUES);
					}
					if (fabs(externalForce(2 * i + 1)) >= 1.0e-15)
					{
						int dof = 2 * i + 1;
						ierr = VecSetValues(b, 1, &dof, &externalForce(2 * i + 1), ADD_VALUES);
					}
				}
			}

			for (Element* el : elements_)
			{
				if (elementPartition_[el->getIndex()] == rank)
				{
					std::pair<vector<double>, matrix<double> > elementMatrices;
					//std::cout << "Element " << el->getIndex() << "\n";
					elementMatrices = el->elementContributions();

					//std::cout << elementMatrices.first << "\n";
					//std::cout << elementMatrices.second << "\n\n";

					//dispersing element rhs contribution into global rhs vector
					for (size_t i = 0; i < el->getNodes().size(); i++)
					{
						if (fabs(elementMatrices.first(2*i)) >= 1.0e-15)
						{
							int dof = 2 * el->getNode(i)->getIndex();
							ierr = VecSetValues(b, 1, &dof, &elementMatrices.first(2*i), ADD_VALUES);
							//std::cout << "dof " << dof << ", value " << elementMatrices.first(2*i) << "\n";
						}
						if (fabs(elementMatrices.first(2*i+1)) >= 1.0e-15)
						{
							int dof = 2 * el->getNode(i)->getIndex() + 1;
							ierr = VecSetValues(b, 1, &dof, &elementMatrices.first(2*i+1), ADD_VALUES);
							//std::cout << "dof " << dof << ", value " << elementMatrices.first(2*i+1) << "\n";
						}

						//dispersing element tangent contribution into global sparse matrix
						for (size_t j = 0; j < el->getNodes().size(); j++)
						{
							//stiffness and mass matrices
							if (fabs(elementMatrices.second(2*i, 2*j)) >= 1.e-15)
							{
								int dof1 = 2 * el->getNode(i)->getIndex();
								int dof2 = 2 * el->getNode(j)->getIndex();
								ierr = MatSetValues(A, 1, &dof1, 1, &dof2, &elementMatrices.second(2*i, 2*j), ADD_VALUES);
							}
							if (fabs(elementMatrices.second(2*i+1, 2*j)) >= 1.e-15)
							{
								int dof1 = 2 * el->getNode(i)->getIndex() + 1;
								int dof2 = 2 * el->getNode(j)->getIndex();
								ierr = MatSetValues(A, 1, &dof1, 1, &dof2, &elementMatrices.second(2*i+1, 2*j), ADD_VALUES);
							}
							if (fabs(elementMatrices.second(2*i, 2*j+1)) >= 1.e-15)
							{
								int dof1 = 2 * el->getNode(i)->getIndex();
								int dof2 = 2 * el->getNode(j)->getIndex() + 1;
								ierr = MatSetValues(A, 1, &dof1, 1, &dof2, &elementMatrices.second(2*i, 2*j+1), ADD_VALUES);
							}
							if (fabs(elementMatrices.second(2*i+1, 2*j+1)) >= 1.e-15)
							{
								int dof1 = 2 * el->getNode(i)->getIndex() + 1;
								int dof2 = 2 * el->getNode(j)->getIndex() + 1;
								ierr = MatSetValues(A, 1, &dof1, 1, &dof2, &elementMatrices.second(2*i+1, 2*j+1), ADD_VALUES);
							}
						}
					}
				}
			}
			// if (rank == 0)
			// {
			// 	int dof = 2;
			// 	double value = 0.5 / (beta_ * deltat_ * deltat_);
			// 	double value1 = -0.5 * nodes_[1]->getCurrentAcceleration()(0);
			// 	ierr = MatSetValues(A, 1, &dof, 1, &dof, &value, ADD_VALUES);
			// 	ierr = VecSetValues(b, 1, &dof, &value1, ADD_VALUES);
			// 	dof = 3;
			// 	value1 = -0.5 * nodes_[1]->getCurrentAcceleration()(1);
			// 	ierr = MatSetValues(A, 1, &dof, 1, &dof, &value, ADD_VALUES);
			// 	ierr = VecSetValues(b, 1, &dof, &value1, ADD_VALUES);
			// 	dof = 4;
			// 	value1 = -0.5 * nodes_[2]->getCurrentAcceleration()(0);
			// 	ierr = MatSetValues(A, 1, &dof, 1, &dof, &value, ADD_VALUES);
			// 	ierr = VecSetValues(b, 1, &dof, &value1, ADD_VALUES);
			// 	dof = 5;
			// 	value1 = -0.5 * nodes_[2]->getCurrentAcceleration()(1);
			// 	ierr = MatSetValues(A, 1, &dof, 1, &dof, &value, ADD_VALUES);
			// 	ierr = VecSetValues(b, 1, &dof, &value1, ADD_VALUES);

			// }
			//Assemble matrices and vectors
            ierr = MatAssemblyBegin(A,MAT_FINAL_ASSEMBLY); CHKERRQ(ierr);
            ierr = MatAssemblyEnd(A,MAT_FINAL_ASSEMBLY); CHKERRQ(ierr);
            
            ierr = VecAssemblyBegin(b); CHKERRQ(ierr);
            ierr = VecAssemblyEnd(b); CHKERRQ(ierr);

			//MatView(A,PETSC_VIEWER_STDOUT_WORLD);CHKERRQ(ierr);
			//VecView(b,PETSC_VIEWER_STDOUT_WORLD);CHKERRQ(ierr);
			//VecView(x,PETSC_VIEWER_STDOUT_WORLD);CHKERRQ(ierr);

			//Apply dirichlet boundary conditions
			MatZeroRowsColumns(A,temp.size(),dof,1.0,x,b);
			
			//MatView(A,PETSC_VIEWER_STDOUT_WORLD);CHKERRQ(ierr);
			//VecView(b,PETSC_VIEWER_STDOUT_WORLD);CHKERRQ(ierr);
			//VecView(x,PETSC_VIEWER_STDOUT_WORLD);CHKERRQ(ierr);

			//Create KSP context to solve the linear system
            ierr = KSPCreate(PETSC_COMM_WORLD,&ksp); CHKERRQ(ierr);
            ierr = KSPSetOperators(ksp,A,A); CHKERRQ(ierr);
			//Solve using GMRES
			// ierr = KSPSetTolerances(ksp,1.e-10,PETSC_DEFAULT,PETSC_DEFAULT,500); CHKERRQ(ierr);
            // ierr = KSPGetPC(ksp,&pc);
            // ierr = PCSetType(pc,PCLU);
            // ierr = KSPSetType(ksp,KSPDGMRES); CHKERRQ(ierr);
            // ierr = KSPGMRESSetRestart(ksp, 500); CHKERRQ(ierr);
			//Solve using MUMPS
			#if defined(PETSC_HAVE_MUMPS)
            ierr = KSPSetType(ksp,KSPPREONLY);
            ierr = KSPGetPC(ksp,&pc);
            ierr = PCSetType(pc, PCLU);
			#endif          
            ierr = KSPSetFromOptions(ksp); CHKERRQ(ierr);
            ierr = KSPSetUp(ksp);

			//Solve linear system
			ierr = KSPSolve(ksp,b,x); CHKERRQ(ierr);
            ierr = KSPGetTotalIterations(ksp, &iterations);

			//MatView(A,PETSC_VIEWER_STDOUT_WORLD);CHKERRQ(ierr);
			//VecView(b,PETSC_VIEWER_STDOUT_WORLD);CHKERRQ(ierr);
			//VecView(x,PETSC_VIEWER_STDOUT_WORLD);CHKERRQ(ierr);

			//Gathers the solution vector to the master process
            ierr = VecScatterCreateToAll(x, &ctx, &All); CHKERRQ(ierr);
            ierr = VecScatterBegin(ctx, x, All, INSERT_VALUES, SCATTER_FORWARD); CHKERRQ(ierr);
            ierr = VecScatterEnd(ctx, x, All, INSERT_VALUES, SCATTER_FORWARD); CHKERRQ(ierr);
            ierr = VecScatterDestroy(&ctx); CHKERRQ(ierr);

			//Updates nodal variables
			norm = 0.0;
			Ione = 1;

			for (size_t i = 0; i < nodes_.size(); i++)
			{
				Idof = 2*i;
				ierr = VecGetValues(All, Ione, &Idof, &val); CHKERRQ(ierr);
				norm += val * val;
				nodes_[i]->incrementCurrentCoordinate(0,val);

				Idof = 2*i+1;
				ierr = VecGetValues(All, Ione, &Idof, &val); CHKERRQ(ierr);
				norm += val * val;
				nodes_[i]->incrementCurrentCoordinate(1,val);
			}

			for (Node* node : nodes_)
			{
				bounded_vector<double, 2> vel, accel;
				accel = node->getCurrentCoordinate() / (beta_ * deltat_ * deltat_) - node->getPastCoordinate() / (beta_ * deltat_ * deltat_) -
						node->getPastVelocity() / (beta_ * deltat_) - node->getPastAcceleration() * (0.5 / beta_ - 1.0);
				node->setCurrentAcceleration(accel);
				vel = gamma_ * deltat_ * node->getCurrentAcceleration() + node->getPastVelocity() + deltat_ * (1.0 - gamma_) * node->getPastAcceleration();
				node->setCurrentVelocity(vel);
			}

			//boost::posix_time::ptime t2 = boost::posix_time::microsec_clock::local_time();

			if (rank == 0)
			{
				//boost::posix_time::time_duration time = t2 - t1;

				std::cout << "Iteration = " << iteration 
                          << " (" << iterations << ")"  
                          << "   x Norm = " << std::scientific << sqrt(norm) 
                          << std::endl;
                          //<< "  Time (s) = " << std::fixed
                          //<< diff.total_milliseconds()/1000. << std::endl;
			}

			ierr = KSPDestroy(&ksp); CHKERRQ(ierr);
            ierr = VecDestroy(&b); CHKERRQ(ierr);
            ierr = VecDestroy(&x); CHKERRQ(ierr);
            ierr = VecDestroy(&All); CHKERRQ(ierr);
            ierr = MatDestroy(&A); CHKERRQ(ierr);

			if (sqrt(norm) <= tolerance)
				break;
		}

		//export results to paraview
		if (rank == 0)
		{
			computeCauchyStress();
			exportToParaview(timeStep);
		}
	}
	PetscFree(dof);
	return 0;
}

void SolidDomain::computeCauchyStress()
{
	vector<int> nodalContribution(nodes_.size(), 0);

	for (Node* node : nodes_)
		node->setCauchyStress(0.0);

	for (Element* el : elements_)
	{
		matrix<double> nodalStress = el->computeCauchyStress();
		for (int i = 0; i < el->getNodes().size(); i++)
		{
			int index = el->getNode(i)->getIndex();
			nodalContribution(index)++;
			for (int j = 0; j < 3; j++)
			{
				double value = nodalStress(i,j);
				nodes_[index]->incrementCauchyStress(j, value);
			}
		}
	}
	
	for (int i = 0; i < nodes_.size(); i++)
	{
		for (int j = 0; j < 3; j++)
		{
			double value = nodes_[i]->getCauchyStress()(j);
			value /= (double)nodalContribution(i);
			nodes_[i]->setCauchyStress(j, value);
		}
	}
}

void SolidDomain::exportToParaview(const int& timestep)
{
	std::stringstream text;
	text << "results/" << "solidOutput" << timestep << ".vtu";
	std::ofstream file(text.str());

	//header
	file << "<?xml version=\"1.0\"?>" << "\n"
         << "<VTKFile type=\"UnstructuredGrid\">" << "\n"
		 << "  <UnstructuredGrid>" << "\n"
         << "  <Piece NumberOfPoints=\"" << nodes_.size()
         << "\"  NumberOfCells=\"" << elements_.size()
         << "\">" << "\n";
	//nodal coordinates
	file << "    <Points>" << "\n"
         << "      <DataArray type=\"Float64\" "
         << "NumberOfComponents=\"3\" format=\"ascii\">" << "\n";
    for (Node* n : nodes_)
	{
		file << n->getCurrentCoordinate()(0) << " " << n->getCurrentCoordinate()(1) << " " << 0.0 << "\n";
	}
    file << "      </DataArray>" << "\n"
         << "    </Points>" << "\n";
	//element connectivity
	file << "    <Cells>" << "\n"
         << "      <DataArray type=\"Int32\" "
         << "Name=\"connectivity\" format=\"ascii\">" << "\n";
    for (Element* e : elements_)
	{
		for (Node* n : e->getNodes())
		{
			file << n->getIndex() << " ";
		}
		file << "\n";
	}
	file << "      </DataArray>" << "\n";
	//offsets
	file << "      <DataArray type=\"Int32\""
		 << " Name=\"offsets\" format=\"ascii\">" << "\n";
	int aux = 0;
	for (Element* e : elements_)
	{
		int n = e->getNodes().size();
		aux += n;
		file << aux << "\n";
	}
	file << "      </DataArray>" << "\n";
	//elements type
	file << "      <DataArray type=\"UInt8\" Name=\"types\" "
		 << "format=\"ascii\">" << "\n";

	for (Element* e : elements_)
	{
		file << 69 << "\n";
	}
	file << "      </DataArray>" << "\n"
		 << "    </Cells>" << "\n";
	//nodal results
	file << "    <PointData>" <<"\n";
	file << "      <DataArray type=\"Float64\" NumberOfComponents=\"2\" "
		<< "Name=\"Displacement\" format=\"ascii\">" << "\n";

	for (Node* n: nodes_)
	{
		file << n->getCurrentCoordinate()(0) - n->getInitialCoordinate()(0) << " "
			 << n->getCurrentCoordinate()(1) - n->getInitialCoordinate()(1) << "\n";
	}
	file << "      </DataArray> " << "\n";
	file << "      <DataArray type=\"Float64\" NumberOfComponents=\"2\" "
		<< "Name=\"Velocity\" format=\"ascii\">" << "\n";

	for (Node* n: nodes_)
	{
		file << n->getCurrentVelocity()(0) << " " << n->getCurrentVelocity()(1) << "\n";
	}
	file << "      </DataArray> " << "\n";
	file << "      <DataArray type=\"Float64\" NumberOfComponents=\"2\" "
		<< "Name=\"Acceleration\" format=\"ascii\">" << "\n";

	for (Node* n: nodes_)
	{
		file << n->getCurrentAcceleration()(0) << " " << n->getCurrentAcceleration()(1) << "\n";
	}
	file << "      </DataArray> " << "\n";
	file << "      <DataArray type=\"Float64\" NumberOfComponents=\"3\" "
		<< "Name=\"CauchyStress\" format=\"ascii\">" << "\n";

	for (Node* n: nodes_)
	{
		file << n->getCauchyStress()(0) << " " << n->getCauchyStress()(1) << " " << n->getCauchyStress()(2) << "\n";
		//std::cout << n->getCauchyStress()(0) << " " << n->getCauchyStress()(1) << " " << n->getCauchyStress()(2) << "\n";
	}
	file << "      </DataArray> " << "\n";
	file << "    </PointData>" << "\n";
	//elemental results
	file << "    <CellData>" << "\n";

	file << "    </CellData>" << "\n";
	//footnote
	file << "  </Piece>" << "\n"
		<< "  </UnstructuredGrid>" << "\n"
		<< "</VTKFile>" << "\n";
	file.close();

	// std::stringstream text2;
	// text2 << "error.dat";
	// std::ofstream file2;
	// if (timestep == 0) file2.open(text2.str());
	// else file2.open(text2.str(), std::ofstream::out | std::ofstream::app);
	// file2.precision(16);

	// file2 << timestep << "\n";
	// for (Node* n : nodes_)
	// {
	// 	file2 << n->getCurrentCoordinate()(0) << " " << n->getCurrentCoordinate()(1) << "\n";
	// }

	// std::stringstream text2;
	// text2 << "error.dat";
	// std::ifstream file2;
	// file2.open(text2.str());
	// std::string line;
	// vector<double> reference_position(2 * nodes_.size());
	// for (int i = 0; i < 4000; i++)
	// {
	// 	std::getline(file2, line);
	// 	if (i == 16 * timestep + 15)
	// 	{
	// 		for (int j = 0; j < nodes_.size(); j++)
	// 		{
	// 			file2 >> reference_position(2 * j) >> reference_position(2 * j + 1);
	// 			std::getline(file2, line);
	// 		}
	// 		break;
	// 	}
	// 	else
	// 	{
	// 		for (int j = 0; j < nodes_.size(); j++)
	// 		{
	// 			std::getline(file2, line);
	// 		}
	// 	}
	// }

	// // Local error
	// std::stringstream text3;
	// text3 << "localerror-position" << deltat_ << ".dat";
	// std::ofstream file3;
	// file3.open(text3.str(), std::ofstream::out | std::ofstream::app);
	// double error_position = sqrt((nodes_[1]->getCurrentCoordinate()(0) - reference_position(2)) * (nodes_[1]->getCurrentCoordinate()(0) - reference_position(2)));

	// file3 << deltat_ * (timestep + 1.0) << " " << error_position << "\n";

	// // Norm L2
	// std::stringstream text4;
	// text4 << "globalerror-position" << deltat_ << ".dat";

	// std::ofstream file4;
	// file4.open(text4.str(), std::ofstream::out | std::ofstream::app);
	// error_position = 0.0;
	// for (Element* el : elements_)
	// {
	// 	vector<double> local_reference_position(2*el->getNodes().size());
	// 	for (int i = 0; i < el->getNodes().size(); i++)
	// 	{
	// 		int index = el->getNode(i)->getIndex();
	// 		local_reference_position(2*i) = reference_position(2*index);
	// 		local_reference_position(2*i+1) = reference_position(2*index+1);
	// 	}
	// 	error_position += el->domainIntegration(local_reference_position);
	// }
	// error_position = sqrt(error_position);
	// file4 << deltat_ * (timestep + 1.0) << " " << error_position << "\n";	
}

void SolidDomain::domainDecompositionMETIS(const std::string& elementType)
{
    std::string mirror2;
    mirror2 = "domain_decomposition.txt";
    std::ofstream mirrorData(mirror2.c_str());
    
    int size;

    MPI_Comm_size(PETSC_COMM_WORLD, &size);

    idx_t objval;
    idx_t numEl = elements_.size();
    idx_t numNd = nodes_.size();
    idx_t ssize = size;
    idx_t one = 1;
	idx_t n;
	if (elementType == "T3")
		n = 3;
	else if (elementType == "T6")
		n = 6;
	else if (elementType == "T10")
		n = 10;
    idx_t elem_start[numEl+1], elem_connec[n*numEl];
    elementPartition_ = new idx_t[numEl];
    nodePartition_ = new idx_t[numNd];


    for (idx_t i = 0; i < numEl+1; i++)
	{
        elem_start[i]=n*i;
    }
    for (idx_t jel = 0; jel < numEl; jel++)
	{
        
        
        for (idx_t i=0; i < elements_[jel]->getNodes().size(); i++)
		{	
			int nodeIndex = elements_[jel]->getNodes()[i]->getIndex();
        	elem_connec[n*jel+i] = nodeIndex;
        }
    }

    //Performs the domain decomposition
    METIS_PartMeshDual(&numEl, &numNd, elem_start, elem_connec, \
                              NULL, NULL, &one, &ssize, NULL, NULL,    \
                              &objval, elementPartition_, nodePartition_);

    mirrorData << std::endl \
               << "FLUID MESH DOMAIN DECOMPOSITION - ELEMENTS" << std::endl;
    for (int i = 0; i < elements_.size(); i++)
	{
        mirrorData << "process = " << elementPartition_[i] \
                   << ", element = " << i << std::endl;
    }

    mirrorData << std::endl \
               << "FLUID MESH DOMAIN DECOMPOSITION - NODES" << std::endl;
    for (int i = 0; i < nodes_.size(); i++)
	{
        mirrorData << "process = " << nodePartition_[i] \
                   << ", node = " << i << std::endl;
    }

}